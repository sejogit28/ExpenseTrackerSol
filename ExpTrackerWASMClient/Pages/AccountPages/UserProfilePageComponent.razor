@page "/userProfilePage"
@inject IAdminScreenUseCases AdminScreenUseCases
@inject IGroupsScreenUseCases GroupsScreenUseCases

@if (currentIdentityUser != null)
{
    <div class="row">
        <h3>Hello @currentIdentityUser.UserName, welcome to your profile page!</h3>
    </div>

    <br />
    <br />

    <div class="row">
        <details>
            <summary>User Info(Click here to reveal)</summary>
            <ol>
                <li>Your Id: @currentIdentityUser.Id</li>
                <li>Your Email: @currentIdentityUser.Email</li>
                <li>The date you signed up: @currentIdentityUser.DateAdded</li>
                <li>Your username: @currentIdentityUser.UserName</li>
            </ol>
        </details>
    </div>

    <br />
    <br />

    <div class="row">
        <div class="card" style="width: 18rem;">
            <div class="card-header">
                Your Group(s):
            </div>
            <ul class="list-group list-group-flush">
                @if (userGroupList != null)
                {
                    foreach (var group in userGroupList)
                    {
                        <li class="list-group-item"> 
                            <NavLink href="@($"/grouphomepage/{group.Groups.GroupsId}")">
                                @group.Groups.GroupName
                            </NavLink> 
                            <button class="btn btn-outline-secondary float-right" @onclick="async () => { await DeleteGroup(group.Groups.GroupsId); }">
                                Delete
                            </button>
                        </li>
                    }
                }
            </ul>
            <div class="card-footer">
                @if (showCreateGroupForm == false)
                {
                    <button type="button" class="btn btn-outline-info" @onclick="() => { toggleNewGroupForm(); }">
                        Create A New Group
                    </button>
                 }
                else 
                {
                    <button type="button" class="btn btn-outline-info" @onclick="() => { toggleNewGroupForm(); }">
                        Cancel
                    </button>
                }
            </div>
        </div>
    </div>

    <br/>
    <br/>

@if(showCreateGroupForm ==  true)
{
<EditForm Model="group" OnValidSubmit="createNewGroup">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="card w-25 shadow-sm">
        <h5 class="card-header">Create a New Group</h5>
        <div class="card-body">
            <InputText hidden class="form-control" id="ExpenseTrackerUserId" @bind-Value="group.ExpenseTrackerUserId"></InputText>
            <InputDate hidden class="form-control" id="DateCreated" @bind-Value="group.DateCreated"></InputDate>

            <div class="form-group mx-sm-3 mb-2">
                <label for="Amount" class="col-form-label">Group Name</label>
                <InputText class="form-control" id="GroupName" @bind-Value="group.GroupName"></InputText>
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-outline-info">
                Create Group
            </button>
        </div>
    </div>
</EditForm>

<br/>
<br />
}
    
}
else
{
    <div class="row justify-content-center">
        <div class="spinner-grow text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <h2>Fetching your info...</h2>
        <div class="spinner-grow text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {

    public string currentUser;
    ExpenseTrackerUser currentIdentityUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    Groups group;
    List<GroupUsers> userGroupList;

    public bool showCreateGroupForm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;
        currentUser = user.FindFirst(ClaimTypes.Name).Value;

        currentIdentityUser = await AdminScreenUseCases.ViewSingleUser(currentUser);

        userGroupList = await GroupsScreenUseCases.ViewAllGroupsByUser(currentUser);

        showCreateGroupForm = false;

        group = new Groups
        {
            DateCreated = DateTime.Now,
            ExpenseTrackerUserId = currentIdentityUser.Id
        };
    }

    public async Task createNewGroup()
    {
        var newGroup = await GroupsScreenUseCases.CreateNewGroup(group, currentUser);

        var newMemberObj = new AddNewMemberToGroup
        {
            GroupId = newGroup.GroupsId,
            NewMemberUserName = currentUser
        };

        await GroupsScreenUseCases.AddUserToGroup(newMemberObj);

        toggleNewGroupForm();
        group.GroupName = "";
        userGroupList = await GroupsScreenUseCases.ViewAllGroupsByUser(currentUser);



    }

    public void toggleNewGroupForm()
    {
        showCreateGroupForm = !showCreateGroupForm;
    }

    public async Task DeleteGroup(int deletableGroupId)
    {
        await GroupsScreenUseCases.DeleteSingleGroup(deletableGroupId);

        userGroupList = await GroupsScreenUseCases.ViewAllGroupsByUser(currentUser);
    }
}

