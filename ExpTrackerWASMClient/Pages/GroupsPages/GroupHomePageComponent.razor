@page "/grouphomepage/{groupId:int}"
@inject IGroupsScreenUseCases GroupsScreenUseCases
@inject NavigationManager NavManager

@if (currentGroup != null)
{
    <div class="row justify-content-center">
        <h3>@currentGroup.GroupName's Home Page</h3>
    </div>

    <div class="row">
        <div class="card">
            <div class="card-header">
                @currentGroup.GroupName's members
            </div>
            <ul class="list-group list-group-flush">
                @if (currentGroupMembers != null)
                {
                    foreach (var groupMember in currentGroupMembers)
                    {
                        <li class="list-group-item">@groupMember</li>
                    }
                }
            </ul>
            <div class="card-footer">
                @if (showMemberInviteForm == true)
                {
                    <button class="btn btn-outline-secondary" @onclick="() => { showMemberInviteForm = false; }">
                        Cancel
                    </button>
                }
                else
                {
                    <button class="btn btn-outline-secondary" @onclick="() => { showMemberInviteForm = true; }">
                        Add A New Member?
                    </button>
                }
                
            </div>
        </div>
    </div>

    <br />
    <br />
    @if (showMemberInviteForm == true)
    {
        <EditForm Model="possibleMember" OnValidSubmit="sendGroupInvite">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="card w-25 shadow-sm">
                <h5 class="card-header">Create a New Group</h5>
                <div class="card-body">
                    <InputText hidden class="form-control" id="ExpenseTrackerUserId" @bind-Value="possibleMember.InviterEmail"></InputText>
                    <InputDate hidden class="form-control" id="DateCreated" @bind-Value="possibleMember.GroupId"></InputDate>

                    <div class="form-group mx-sm-3 mb-2">
                        <label for="Amount" class="col-form-label">Group Name</label>
                        <InputText class="form-control" id="GroupName" @bind-Value="possibleMember.InviteeEmail"></InputText>
                    </div>
                </div>
                <div class="card-footer">


                    <button class="btn btn-outline-info">
                        Send Group Invite
                    </button>


                </div>
            </div>
        </EditForm>

        <br />
        <br />
    }

}
else
{
    <div class="row justify-content-center">
        <h3>Fetching Any Available Info</h3>
    </div>

}


@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    public int groupId { get; set; }

    Groups currentGroup;
    PossibleMemberInvite possibleMember;
    IList<string> currentGroupMembers;
    public string currentUser;
    public bool showMemberInviteForm;
    protected override async Task OnParametersSetAsync()
    {

        currentGroup = await GroupsScreenUseCases.ViewSingleGroup(groupId);
        currentGroupMembers = await GroupsScreenUseCases.ViewAllGroupMemberNames(groupId);

        var authState = await AuthState;
        currentUser = authState.User.FindFirst(ClaimTypes.Name).Value;

        groupSecurity();

        showMemberInviteForm = false;
        possibleMember = new PossibleMemberInvite
        {
            GroupId = groupId,
            InviterEmail = currentUser
        };
    }

    public void groupSecurity()
    {
        if (!currentGroupMembers.Contains(currentUser))
        {
            NavManager.NavigateTo("/userProfilePage");
        }
    }

    public async Task sendGroupInvite()
    {
        await GroupsScreenUseCases.SendInitialInviteEmail(possibleMember);

        showMemberInviteForm = false;

        possibleMember = new PossibleMemberInvite
        {
            GroupId = groupId,
            InviterEmail = currentUser
        };

    }
}
