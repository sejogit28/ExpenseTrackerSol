@page "/inviterconfirm/{inviteeEmail}/{groupId:int}"
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@inject IGroupsScreenUseCases GroupsScreenUseCases
@inject NavigationManager NavManager

<h3>Please Input the required info to confirm your invitee's group membership</h3>

<br />
<br />

<EditForm Model="inviterConfirm" OnValidSubmit="inviterConfirmSubmit">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="card w-auto shadow-sm">
        <h5 class="card-header">Add This Member</h5>
        <div class="card-body">
            <InputDate hidden class="form-control" id="GroupId" @bind-Value="inviterConfirm.GroupId" />
            <div class="form-group mx-sm-3 mb-2">
                <label for="Amount" class="col-form-label">Your Email</label>
                <InputText class="form-control" id="InviterEmail" @bind-Value="inviterConfirm.InviterEmail" />
                <ValidationMessage For="@(() => inviterConfirm.InviterEmail)" />
            </div>
            <div class="form-group mx-sm-3 mb-2">
                <label for="Amount" class="col-form-label">Email of the person you're inviting</label>
                <InputText class="form-control" id="InviteeEmail" @bind-Value="inviterConfirm.InviteeEmail" />
                <ValidationMessage For="@(() => inviterConfirm.InviteeEmail)" />
            </div>


            <div class="form-group mx-sm-3 mb-2">
                <label for="Amount" class="col-form-label">Your Password</label>
                <InputText type="password" class="form-control" id="Password" @bind-Value="inviterConfirm.Password" />
                <ValidationMessage For="@(() => inviterConfirm.Password)" />
            </div>
            <div class="form-group mx-sm-3 mb-2">
                <label for="Amount" class="col-form-label">Confirm Your Password</label>
                <InputText type="password" class="form-control" id="ConfirmPassword" @bind-Value="inviterConfirm.ConfirmPassword" />
                <ValidationMessage For="@(() => inviterConfirm.ConfirmPassword)" />
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-outline-primary">
                Confirm Invitee Membership
            </button>
        </div>
    </div>

</EditForm>

<AlertComponent @ref="alertComponent" />

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    public int groupId { get; set; }

    [Parameter]
    public string inviteeEmail { get; set; }



    public string currentUser;

    PossibleMemberConfirm inviterConfirm;

    OperationResponse operationResponse;

    AlertComponent alertComponent;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthState;

        var user = authState.User;

        if (user.FindFirst(ClaimTypes.Name) != null)
        {
            currentUser = user.FindFirst(ClaimTypes.Name).Value;

            if (currentUser == inviteeEmail)
            {
                NavManager.NavigateTo("/userProfilePage");
            }
        }


    }

    protected override void OnParametersSet()
    {
        inviterConfirm = new PossibleMemberConfirm
            {
                InviteeEmail = "",
                InviterEmail = "",
                Password = "",
                ConfirmPassword = "",
                GroupId = groupId
            };
    }

    public async Task inviterConfirmSubmit()
    {

        if (inviterConfirm.InviteeEmail == inviteeEmail)
        {

            var result = await GroupsScreenUseCases.GroupInviterConfirm(inviterConfirm);

            if (result.OperationSuccessful == true)
            {
                alertComponent.Message = result.OperationMessage;
                alertComponent.show("success");
                StateHasChanged();
                await Task.Delay(3000);
                NavManager.NavigateTo("/");
            }
            else
            {
                alertComponent.Message = result.OperationMessage;
                alertComponent.show("danger");
                StateHasChanged();
            }
        }
        else
        {
            alertComponent.Message = "Invalid value was entered for \'Email of the person you're inviting\'";
            alertComponent.show("danger");
            StateHasChanged();
        }
    }
}
