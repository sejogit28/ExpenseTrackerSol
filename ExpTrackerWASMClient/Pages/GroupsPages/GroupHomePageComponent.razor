@page "/grouphomepage/{groupId:int}"
@inject IGroupsScreenUseCases GroupsScreenUseCases
@inject NavigationManager NavManager

@if (currentGroup != null)
{
    <div class="row justify-content-center">
        <h3>@currentGroup.GroupName's Home Page</h3>
    </div>

    <div class="row justify-content-center">

        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand" href="#"><span class="oi oi-people" aria-hidden="true"></span> </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNavDropdown">
                <ul class="navbar-nav">
                    <li class="nav-item active">
                        <a class="nav-link" href="#"> Home  <span class="sr-only">(current)</span></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="@($"/groupexpenses/{groupId}")">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> All Expenses
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="@($"/groupincomes/{groupId}")">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> All Incomes
                        </a>
                    </li>
                    <li class="nav-item dropdown">
                        <NavLink class="nav-link dropdown-toggle" id="navbarDarkDropdownMenuLink" role="button" data-toggle="dropdown" aria-expanded="false">
                            <span class="oi  oi-pie-chart " aria-hidden="true"></span> Monthly Charts
                        </NavLink>
                        <ul class="dropdown-menu " aria-labelledby="navbarDarkDropdownMenuLink">

                            @foreach (DateTime yearMonth in EachMonth(new DateTime(2021, 3, 1), DateTime.Now).Reverse())
                            {
                                <NavLink class="dropdown-item" href="@($"/GroupIncExpComparisonChart/{groupId}/{yearMonth.ToString("yyyy-MM")}")">
                                    <span class="oi  oi-pie-chart " aria-hidden="true"></span> Budget Chart for: @yearMonth.ToString("yyyy-MM")
                                </NavLink>
                            }
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <NavLink class="nav-link dropdown-toggle" id="navbarDarkDropdownMenuLink" role="button" data-toggle="dropdown" aria-expanded="false">
                            <span class="oi  oi-pie-chart " aria-hidden="true"></span> Monthly Expenses
                        </NavLink>
                        <ul class="dropdown-menu " aria-labelledby="navbarDarkDropdownMenuLink">

                            @foreach (DateTime yearMonth in EachMonth(new DateTime(2021, 3, 1), DateTime.Now).Reverse())
                            {
                                <NavLink class="dropdown-item" href="@($"/groupexpensesbymonth/{groupId}/{yearMonth.ToString("yyyy-MM")}")">
                                    <span class="oi  oi-pie-chart " aria-hidden="true"></span> Expenses for: @yearMonth.ToString("yyyy-MM")
                                </NavLink>
                            }
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <NavLink class="nav-link dropdown-toggle" id="navbarDarkDropdownMenuLink" role="button" data-toggle="dropdown" aria-expanded="false">
                            <span class="oi  oi-pie-chart " aria-hidden="true"></span> Monthly Incomes
                        </NavLink>
                        <ul class="dropdown-menu " aria-labelledby="navbarDarkDropdownMenuLink">

                            @foreach (DateTime yearMonth in EachMonth(new DateTime(2021, 3, 1), DateTime.Now).Reverse())
                            {
                                <NavLink class="dropdown-item" href="@($"/groupincomesbymonth/{groupId}/{yearMonth.ToString("yyyy-MM")}")">
                                    <span class="oi  oi-pie-chart " aria-hidden="true"></span> Incomes for: @yearMonth.ToString("yyyy-MM")
                                </NavLink>
                            }
                        </ul>
                    </li>
                </ul>
            </div>
        </nav>

    </div>

    <br />

    <div class="row">

        <div class="card">
            <div class="card-header">
                @currentGroup.GroupName's members
            </div>
            <ul class="list-group list-group-flush">
                @if (currentGroupMembers != null)
                {
                    foreach (var groupMember in currentGroupMembers)
                    {
                        <li class="list-group-item">@groupMember</li>
                    }
                }
            </ul>
            <div class="card-footer">
                @if (showMemberInviteForm == true)
                {
                    <button class="btn btn-outline-secondary" @onclick="() => { showMemberInviteForm = false; }">
                        Cancel
                    </button>
                }
                else
                {
                    <button class="btn btn-outline-secondary" @onclick="() => { showMemberInviteForm = true; }">
                        Add A New Member?
                    </button>
                }

            </div>
        </div>

    </div>

    <br />
    <br />

    @if (showMemberInviteForm == true)
    {
        <EditForm Model="possibleMember" OnValidSubmit="sendGroupInvite">

            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="card w-25 shadow-sm">
                <h5 class="card-header">Invite A New Member To This Group</h5>
                <div class="card-body">
                    <InputText hidden class="form-control" id="ExpenseTrackerUserId" @bind-Value="possibleMember.InviterEmail" />
                    <InputDate hidden class="form-control" id="DateCreated" @bind-Value="possibleMember.GroupId" />
                    <div class="form-group mx-sm-3 mb-2">
                        <label for="Amount" class="col-form-label">Invitee's Email</label>
                        <InputText class="form-control" id="GroupName" @bind-Value="possibleMember.InviteeEmail" />
                    </div>
                </div>
                <div class="card-footer">
                    <button class="btn btn-outline-info">
                        Send Group Invite
                    </button>
                </div>
            </div>

        </EditForm>

        <AlertComponent @ref="alertComponent"></AlertComponent>
        <br />
        <br />
    }
}
else
{
    <div class="row justify-content-center">
        <h3>Fetching Any Available Info</h3>
    </div>
}


@code
{

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    public int groupId { get; set; }

    Groups currentGroup;

    PossibleMemberInvite possibleMember;

    AlertComponent alertComponent;

    IList<string> currentGroupMembers;

    public string currentUser;

    public bool showMemberInviteForm;


    protected override async Task OnParametersSetAsync()
    {

        currentGroup = await GroupsScreenUseCases.ViewSingleGroup(groupId);
        currentGroupMembers = await GroupsScreenUseCases.ViewAllGroupMemberNames(groupId);
        var authState = await AuthState;
        currentUser = authState.User.FindFirst(ClaimTypes.Name).Value;
        groupSecurity();
        showMemberInviteForm = false;
        possibleMember = new PossibleMemberInvite
        {
            GroupId = groupId,
            InviterEmail = currentUser
        };
    }

    private IEnumerable<DateTime> EachMonth(DateTime from, DateTime thru)
    {

        for (var day = from.Date; day.Date <= thru.Date; day = day.AddMonths(1))
            yield return day;
    }

    public void groupSecurity()
    {

        if (!currentGroupMembers.Contains(currentUser))
        {
            NavManager.NavigateTo("/userProfilePage");
        }
    }

    public async Task sendGroupInvite()
    {
        var result = await GroupsScreenUseCases.SendInitialInviteEmail(possibleMember);

        if (result.OperationSuccessful == true)
        {
            alertComponent.Message = result.OperationMessage;
            alertComponent.show("success");
            await Task.Delay(2000);
            showMemberInviteForm = false;
            possibleMember = new PossibleMemberInvite
            {
                GroupId = groupId,
                InviterEmail = currentUser
            };
        }
        else
        {
            alertComponent.Message = result.OperationMessage;
            alertComponent.show("danger");
        }
    }
}
