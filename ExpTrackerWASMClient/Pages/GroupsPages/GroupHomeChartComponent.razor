@page "/GroupIncExpComparisonChart/{groupId:int}/{targetMonth}"
@page "/GroupIncExpComparisonChart/{groupId:int}/"
@inject IExpensesScreenUseCases ExpensesScreenUseCases
@inject IIncomesScreenUseCases IncomesScreenUseCases
@inject IGroupsScreenUseCases GroupsScreenUseCases
@inject NavigationManager NavManager




@if (currentGroup != null)
{
    <div class="row justify-content-center">
        <h2>@currentGroup.GroupName's Budget Comparison for @targetMonth</h2>
    </div>
}

@*What follows(the 'if' statement) is VERY IMPORTANT due to the async nature of the way you're getting the data.*@
@if (totalMonthlyExpenses != 0 && totalMonthlyIncome != 0)
{

    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-12  p-4">
            <RadzenChart>
                <RadzenDonutSeries Data="@IncExpComparisonChartData" CategoryProperty="IncExpComparisonLabel" ValueProperty="IncExpAmount">
                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Budget Comparison</div>
                            <div>for @targetMonth</div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
            </RadzenChart>
        </div>
    </div>


    <div class="card shadow" style="width: 18rem;">
        <div class="card-header">
            <h2>@currentGroup.GroupName's Remaining Income for @targetMonth:</h2>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                <h4>
                    @whatsLeft$
                </h4>
            </li>
        </ul>
    </div>
}

else
{
    <h2>
        Please Input Values or Wait a Few Seconds to View this Table
    </h2>
}

@code {


    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    public string targetMonth { get; set; }

    [Parameter]
    public int groupId { get; set; }

    Groups currentGroup;
    IList<string> currentGroupMembers;
    public string currentUser;


    IEnumerable<Incomes> incomesbyMonth;

    public float totalMonthlyIncome;

    IEnumerable<Expenses> expensesbyMonth;

    public float totalMonthlyExpenses;


    public float whatsLeft;

    public class DataItem
    {
        public string IncExpComparisonLabel { get; set; }
        public float IncExpAmount { get; set; }
    }

    DataItem[] IncExpComparisonChartData;
    protected override async Task OnParametersSetAsync()
    {
        targetMonth = targetMonth ?? DateTime.Now.ToString("yyyy-MM");
        currentGroup = await GroupsScreenUseCases.ViewSingleGroup(groupId);
        currentGroupMembers = await GroupsScreenUseCases.ViewAllGroupMemberNames(groupId);

        var authState = await AuthState;
        currentUser = authState.User.FindFirst(ClaimTypes.Name).Value;

        groupSecurity();


        incomesbyMonth = await IncomesScreenUseCases.ViewIncomesByMonth(targetMonth);

        expensesbyMonth = await ExpensesScreenUseCases.ViewExpensesByMonth(targetMonth);

        totalMonthlyExpenses = 0;
        totalMonthlyIncome = 0;


        foreach (var income in incomesbyMonth)
        {
            if (groupId == income.GroupsGroupsId)
            {
                totalMonthlyIncome += income.Amount;
            }
        }

        foreach (var expense in expensesbyMonth)
        {
            if (groupId == expense.GroupsGroupsId)
            {
                totalMonthlyExpenses += expense.Amount;
            }
        }


        DataItem[] incExpChartDataContents =
        {
            new DataItem
            {
                IncExpComparisonLabel = "Expenses",
                IncExpAmount = totalMonthlyExpenses
            },
            new DataItem
            {
                IncExpComparisonLabel = "Income",
                IncExpAmount = totalMonthlyIncome
            }
        };

        IncExpComparisonChartData = incExpChartDataContents;

        whatsLeft = totalMonthlyIncome - totalMonthlyExpenses;

    }

    public void groupSecurity(/*string currentUserName*/)
    {
        if (!currentGroupMembers.Contains(currentUser))
        {
            NavManager.NavigateTo("/userProfilePage");
        }
    }


}
