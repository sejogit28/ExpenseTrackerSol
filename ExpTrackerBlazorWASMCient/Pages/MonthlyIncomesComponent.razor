@page "/incomes/bymonth/{targetMonth}"

@inject IIncomesScreenUseCases IncomesScreenUseCases


@*<div class="row justify-content-center">
    <h2>Monthly Incomes for @targetMonth</h2>
    <NavLink class="nav-link" href="@($"/incomes/bymonth/comparisonchart/{targetMonth}")">
        <i class="bi bi-bar-chart-line-fill"></i> Visualize
    </NavLink>
</div>



@if (incomesbyMonth != null)
{

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Income Id</th>
                <th scope="col">User Id</th>
                <th scope="col">Income Type</th>
                <th scope="col">Amount</th>
                <th scope="col">Notes</th>
                <th scope="col">Date Paid</th>
                <th scope="col">Year/Month</th>
                <th scope="col">Date Submitted</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var income in incomesbyMonth)
            {

                <tr>
                    <th scope="row">@income.IncomeId</th>
                    <th scope="row">@income.UserId</th>
                    <th scope="row">@income.IncomeTypes</th>
                    <th scope="row">@income.Amount</th>
                    <th scope="row">@income.Notes</th>
                    <th scope="row">@income.DatePaid.ToShortDateString()</th>
                    <th scope="row">@income.MonthYear</th>
                    <th scope="row">@income.DateSubmitted.ToShortDateString()</th>
                    <th scope="row">
                        <button class="btn btn-outline-secondary mb-3" @onclick="() => getEditableIncome(income.IncomeId)">
                            Edit
                        </button>
                        
                        <button class="btn btn-outline-secondary" @onclick="() => deleteIncome(income.IncomeId)">
                            Delete
                        </button>
                    </th>
                </tr>


            }
        </tbody>
    </table>

    <h4>Total Income for this month: @Math.Round((Double)totalMonthlyIncome, 2)</h4>
}
else
{
    <h2>
        Fetching Info...
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">

        </div>
    </h2>
}

@if (income != null)
{
    <EditForm Model="income" OnValidSubmit="editOrAddNewIncomeSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="container shadow-lg pb-3 mb-4">
            <div class="row justify-content-center">
                <div class="col-auto">
                    <label for="IncomeId" class="col-form-label">Income Id</label>
                    <InputNumber readonly class="form-control" id="IncomeId" @bind-Value="income.IncomeId"></InputNumber>
                </div>

                <div class="col-auto">
                    <label for="UserId" class="col-form-label">UserId</label>
                    <InputText readonly class="form-control" id="UserId" @bind-Value="income.UserId"></InputText>
                </div>

                <div class="col-auto">
                    <label for="IncomeTypes" class="col-form-label">Income Type</label>
                    <InputSelect class="form-control" id="IncomeTypes" @bind-Value="income.IncomeTypes">
                        @foreach (var value in Enum.GetValues(typeof(Incomes.IncomeCategoriesList)))
                        {
                            <option>
                                @value
                            </option>
                        }
                    </InputSelect>
                </div>

                <div class="col-auto">
                    <label for="Amount" class="col-form-label">Amount</label>
                    <InputNumber class="form-control" id="Amount" @bind-Value="income.Amount"></InputNumber>
                </div>

            </div>

            <br/>

            <div class="row justify-content-center">

                <div class="col-5">
                    <label for="Notes" class="col-form-label">Notes</label>
                    <InputTextArea class="form-control" id="Notes" @bind-Value="income.Notes" rows=3></InputTextArea>
                </div>

                <div class="col-3">
                    <label for="DatePaid" class="col-form-label">Date Paid</label>
                    <InputDate class="form-control" id="DatePaid" @bind-Value="income.DatePaid" rows=3></InputDate>
                </div>

                <div class="col-1">
                    <InputText hidden class="form-control" id="MonthYear" @bind-Value="income.MonthYear"></InputText>
                </div>

                <div class="col-2">
                    <label for="DateSubmitted" class="col-form-label">Date Submitted</label>
                    <InputDate hidden class="form-control" id="DateSubmitted" @bind-Value="income.DateSubmitted" rows=3></InputDate>
                </div>

                <div class="row mt-4">
                    <div class="col-6">
                        <button class="btn btn-outline-primary">
                            Submit
                        </button>
                    </div>

                    <div class="col-6">

                    @if (income.IncomeId > 0)
                    {
                        <button class="btn btn-outline-secondary" @onclick="() =>
                                                                            {
                                                                                makeFreshIncome();
                                                                            }">
                            Create A New Income(Clear Form)
                        </button> 
                    }
                    </div>
                </div>

                </div>
        </div>
    </EditForm>

}*@



@code {

    Incomes income;

    //Needs to match the route params but that match doesn't need to be case sensitive
    [Parameter]
    public string targetMonth { get; set; }


    IEnumerable<Incomes> incomesbyMonth;

    public double? totalMonthlyIncome = 0;

    public void makeFreshIncome() {
        income = new Incomes
        {
            DatePaid = DateTime.Now,
            DateSubmitted = DateTime.Now,
            UserId = "You bro",
            MonthYear = "placeholder"
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        incomesbyMonth = await IncomesScreenUseCases.ViewIncomesByMonth(targetMonth);

        foreach (var income in incomesbyMonth)
        {
            totalMonthlyIncome += income.Amount;
        }

        makeFreshIncome();

    }

    async Task deleteIncome(int deletedIncomeId)
    {
        await IncomesScreenUseCases.DeleteIncome(deletedIncomeId);

        incomesbyMonth = await IncomesScreenUseCases.ViewIncomesByMonth(targetMonth);

        totalMonthlyIncome = 0;

        foreach (var income in incomesbyMonth)
        {
            totalMonthlyIncome += income.Amount;
        }
    }


    /*Populates the form with an incomes values and uses the retrieved incomes primary key to tell the form to edit 
    the retrieved income instead of creating a new income*/

    async Task getEditableIncome(int IncomeId)
    {
        income = await IncomesScreenUseCases.GetSingleIncome(IncomeId);
    }

    async Task editOrAddNewIncomeSubmit()
    {

        if(income.IncomeId ! > 0)
        {
            await IncomesScreenUseCases.EditIncome(income);


            makeFreshIncome();

            incomesbyMonth = await IncomesScreenUseCases.ViewIncomesByMonth(targetMonth);

            totalMonthlyIncome = 0;

            foreach (var income in incomesbyMonth)
            {
                totalMonthlyIncome += income.Amount;
            }
        }

        else
        {


            await IncomesScreenUseCases.CreateNewIncome(income);

            makeFreshIncome();

            incomesbyMonth = await IncomesScreenUseCases.ViewIncomesByMonth(targetMonth);

            totalMonthlyIncome = 0;

            foreach (var income in incomesbyMonth)
            {
                totalMonthlyIncome += income.Amount;
            }
        }

    }


}
