@page "/expenses/bymonth/{targetMonth}"

@inject IExpensesScreenUseCases ExpensesScreenUseCases

<div class="row justify-content-center">
    <h2>Monthly Expenses for @targetMonth</h2>
    <NavLink class="nav-link" href="@($"/expenses/bymonth/comparisonchart/{targetMonth}")">
        <i class="bi bi-bar-chart-line-fill"></i> Visualize
    </NavLink>
</div>


@if (expensesbyMonth != null)
{

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Expense Id</th>
                <th scope="col">User Id</th>
                <th scope="col">Expense Type</th>
                <th scope="col">Amount</th>
                <th scope="col">Notes</th>
                <th scope="col">Date Spent</th>
                <th scope="col">Year/Month</th>
                <th scope="col">Date Submitted</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expensesbyMonth)
            {

                <tr>
                    <th scope="row">@expense.ExpenseId</th>
                    <th scope="row">@expense.UserId</th>
                    <th scope="row">@expense.ExpenseTypes</th>
                    <th scope="row">@expense.Amount</th>
                    <th scope="row">@expense.Notes</th>
                    <th scope="row">@expense.DateSpent.ToShortDateString()</th>
                    <th scope="row">@expense.MonthYear</th>
                    <th scope="row">@expense.DateSubmitted.ToShortDateString()</th>
                    <th scope="row">
                        <button class="btn btn-outline-secondary mb-3" @onclick="() => getEditableExpense(expense.ExpenseId)">
                            Edit
                        </button>

                        <button class="btn btn-outline-secondary" @onclick="() => deleteExpense(expense.ExpenseId)">
                            Delete
                        </button>
                    </th>
                </tr>


            }
        </tbody>
    </table>

    <h4>Total Expenses for this month: @Math.Round((Double)totalMonthlyExpenses, 2)</h4>
}
else
{
    <h2>
        Fetching Info...
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">

        </div>
    </h2>
}

@if (expense != null)
{
    <EditForm Model="expense" OnValidSubmit="editOrAddNewExpenseSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="container shadow-lg p-3 mb-4">
            <div class="row">
                
                    @*<label for="ExpenseId" class="col-form-label">Expense Id</label>*@
                    <InputNumber hidden class="form-control" id="ExpenseId" @bind-Value="expense.ExpenseId"/>
                

                <div class="col-auto">
                    <label for="UserId" class="col-form-label">UserId</label>
                    <InputText readonly class="form-control" id="UserId" @bind-Value="expense.UserId"></InputText>
                </div>

                <div class="col-auto">
                    <label for="ExpenseTypes" class="col-form-label">Expense Type</label>
                    <InputSelect class="form-control" id="ExpenseTypes" @bind-Value="expense.ExpenseTypes">
                        @foreach (var value in Enum.GetValues(typeof(Expenses.ExpenseCategoriesList)))
                            {
                            <option>
                                @value
                            </option>
                            }
                    </InputSelect>
                </div>

                <div class="col-auto">
                    <label for="Amount" class="col-form-label">Amount</label>
                    <InputNumber class="form-control" id="Amount" @bind-Value="expense.Amount"></InputNumber>
                </div>

            </div>

            <br />

            <div class="row ">

                <div class="col-5">
                    <label for="Notes" class="col-form-label">Notes</label>
                    <InputTextArea class="form-control" id="Notes" @bind-Value="expense.Notes" rows=3></InputTextArea>
                </div>

                <div class="col-3">
                    <label for="DatePaid" class="col-form-label">Date Spent</label>
                    <InputDate class="form-control" id="DateSpent" @bind-Value="expense.DateSpent" rows=3></InputDate>
                </div>

                <div class="col-1">
                    <InputText hidden class="form-control" id="MonthYear" @bind-Value="expense.MonthYear"></InputText>
                </div>

                <div class="col-2">
                    @*<label for="DateSubmitted" class="col-form-label">Date Submitted</label>*@
                    <InputDate hidden class="form-control" id="DateSubmitted" @bind-Value="expense.DateSubmitted" rows=3></InputDate>
                </div>

                <div class="row mt-4">
                    <div class="col-6">
                        <button class="btn btn-outline-primary">
                            Submit
                        </button>
                    </div>

                    <div class="col-6">

                        @if (expense.ExpenseId > 0)
                        {
                            <button class="btn btn-outline-secondary" @onclick="() => 
                                                                                {
                                                                                    makeFreshExpense();
                                                                                }">
                                Create A New Expense(Clear Form)
                            </button>
                        }
                    </div>
                </div>

            </div>
        </div>
    </EditForm>

}



@code {

    Expenses expense;

    //Needs to match the route params but that match doesn't need to be case sensitive
    [Parameter]
    public string targetMonth { get; set; }


    IEnumerable<Expenses> expensesbyMonth;

    public double? totalMonthlyExpenses = 0;

    public void makeFreshExpense()
    {
        expense = new Expenses
        {
            DateSpent = DateTime.Now,
            DateSubmitted = DateTime.Now,
            UserId = "You broski",
            MonthYear = "placeholder"
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        expensesbyMonth = await ExpensesScreenUseCases.ViewExpensesByMonth(targetMonth);

        foreach (var expenseAmount in expensesbyMonth)
        {
            totalMonthlyExpenses += expenseAmount.Amount;
        }

        makeFreshExpense();

    }

    async Task deleteExpense(int deletedExpenseId)
    {
        await ExpensesScreenUseCases.DeleteExpense(deletedExpenseId);

        expensesbyMonth = await ExpensesScreenUseCases.ViewExpensesByMonth(targetMonth);

        totalMonthlyExpenses = 0;

        foreach (var expenseAmount in expensesbyMonth)
        {
            totalMonthlyExpenses += expenseAmount.Amount;
        }
    }


    /*Populates the form with an expenses values and uses the retrieved expenses primary key
    to tell the form to edit the retrieved expense instead of creating a new expenses*/

    async Task getEditableExpense(int ExpenseId)
    {
        expense = await ExpensesScreenUseCases.GetSingleExpense(ExpenseId);
    }

    async Task editOrAddNewExpenseSubmit()
    {

        if (expense.ExpenseId! > 0)
        {
            await ExpensesScreenUseCases.EditExpense(expense);


            makeFreshExpense();

            expensesbyMonth = await ExpensesScreenUseCases.ViewExpensesByMonth(targetMonth);

            totalMonthlyExpenses = 0;

            foreach (var expense in expensesbyMonth)
            {
                totalMonthlyExpenses += expense.Amount;
            }
        }

        else
        {


            await ExpensesScreenUseCases.CreateNewExpense(expense);

            makeFreshExpense();

            expensesbyMonth = await ExpensesScreenUseCases.ViewExpensesByMonth(targetMonth);

            totalMonthlyExpenses = 0;

            foreach (var expense in expensesbyMonth)
            {
                totalMonthlyExpenses += expense.Amount;
            }
        }

    }


}
