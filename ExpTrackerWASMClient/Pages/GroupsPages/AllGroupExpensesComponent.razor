@page "/groupexpenses/{groupId:int}"
@inject IGroupsScreenUseCases GroupsScreenUseCases
@inject NavigationManager NavManager
@inject IExpensesScreenUseCases ExpensesScreenUseCases


@if (currentGroup != null)
{
    <div class="row justify-content-center">
        <div class="col-3 justify-content-start">
            <a class="btn btn-primary" href="@($"/grouphomepage/{groupId}")" role="button">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </a>
        </div>
        <div class="col-6 justify-content-center">
            <h1>A Full List of All @currentGroup.GroupName's Expenses<i class="bi bi-list-ul"></i></h1>
        </div>
        <div class="col-3 justify-content-end">
            <div class="btn-group dropright">
                <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Filter By Expense Type
                </button>
                <div class="dropdown-menu">
                    <a class="dropdown-item" @onclick="async() => { await unFilterExpenses();  }">All</a>
                    <div class="dropdown-divider"></div>
                    @*<button class="btn btn-outline-info" @onclick="() => { filterIncomes(); }">Paid Back</button>*@
                    @foreach (var value in Enum.GetValues(typeof(Expenses.ExpenseCategoriesList)))
                    {
                        <a class="dropdown-item" @onclick="async() => { await filterExpenses(value.ToString()); }">@value.ToString()</a>
                    }
                </div>
            </div>
        </div>
    </div>
}

    <br />

    @if (filteredExpenses != null)
    {

        <table class="table table-striped table-hover table-responsive-lg shadow">
            <thead>
                <tr>
                    <th scope="col">Expense Id</th>
                    <th scope="col">User Id</th>
                    <th scope="col">Expense Type</th>
                    <th scope="col">Amount</th>
                    <th scope="col">Notes</th>
                    <th scope="col">Date Spent</th>
                    <th scope="col">Date Submitted</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var expenses in filteredExpenses)
                {
                    if (groupId == expenses.GroupsGroupsId)
                    {
                        <tr>
                            <th scope="row">@expenses.ExpenseId</th>
                            <th scope="row">@expenses.UserId</th>
                            <th scope="row">@expenses.ExpenseTypes</th>
                            <th scope="row">@expenses.Amount</th>
                            <th scope="row">@expenses.Notes</th>
                            <th scope="row">
                                <NavLink style="color: blue" href="@($"/groupexpensesbymonth/{groupId}/{expenses.MonthYear}")">
                                    @expenses.DateSpent.ToString("g")
                                </NavLink>
                            </th>
                            <th scope="row">@expenses.DateSubmitted.ToString("g")</th>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <h2>
            Fetching Info...
            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">

            </div>
        </h2>
    }



    @code
{
        [CascadingParameter]
        public Task<AuthenticationState> AuthState { get; set; }

        [Parameter]
        public int groupId { get; set; }

public string currentUser;
    Groups currentGroup;
    IList<Expenses> filteredExpenses;
    IList<string> currentGroupMembers;

    protected override async Task OnInitializedAsync()
    {
        currentGroup = await GroupsScreenUseCases.ViewSingleGroup(groupId);
        currentGroupMembers = await GroupsScreenUseCases.ViewAllGroupMemberNames(groupId);

        var authState = await AuthState;
        var user = authState.User;

        currentUser = user.FindFirst(ClaimTypes.Name).Value;

        groupSecurity();

        filteredExpenses = await ExpensesScreenUseCases.ViewAllExpenses();
    }

    public async Task filterExpenses(string searchTerm)
    {

        await unFilterExpenses();

        foreach (var expense in filteredExpenses.ToList())
        {
            if (expense.ExpenseTypes.ToString() != searchTerm)
            {
                filteredExpenses.Remove(expense);
            }
        }
        StateHasChanged();
    }
    public async Task unFilterExpenses()
    {
        filteredExpenses = await ExpensesScreenUseCases.ViewAllExpenses();
        StateHasChanged();
    }

    public void groupSecurity()
    {
        if (!currentGroupMembers.Contains(currentUser))
        {
            NavManager.NavigateTo("/userProfilePage");
        }
    }

    }
