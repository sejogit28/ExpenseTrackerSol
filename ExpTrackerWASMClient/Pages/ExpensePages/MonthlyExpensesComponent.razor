@page "/expensesbymonth/{targetMonth}"
@page  "/expensesbymonth/"
@inject IJSRuntime JsRuntime
@inject IExpensesScreenUseCases ExpensesScreenUseCases

<div class="row justify-content-center">
    <h2>Monthly Expenses for @targetMonth</h2>
    <NavLink class="nav-link" href="@($"/expensesbymonth/comparisonchart/{targetMonth}")">
        <span class="iconify icon:oi:bar-chart icon-inline:false"></span>
        Visualize
    </NavLink>
</div>



@if (expensesbyMonth != null)
{

    <table class="table table-striped table-hover table-responsive shadow">
        <thead>
            <tr>
                <th scope="col">Expense Id</th>
                <th scope="col">User</th>
                <th scope="col">Expense Type</th>
                <th scope="col">Amount</th>
                <th scope="col">Notes</th>
                <th scope="col">Date Spent</th>
                <th scope="col">Date Submitted</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expensesbyMonth)
            {
                if (expense.UserId == currentUser && expense.GroupsGroupsId == null)
                {
                    <tr>
                        <th scope="row">@expense.ExpenseId</th>
                        <th scope="row">@expense.UserId</th>
                        <th scope="row">@expense.ExpenseTypes</th>
                        <th scope="row">@expense.Amount</th>
                        <th scope="row">@expense.Notes</th>
                        <th scope="row">@expense.DateSpent.ToShortDateString()</th>
                        <th scope="row">@expense.DateSubmitted.ToShortDateString()</th>
                        <th scope="row">
                            <div class="btn-group" role="group" aria-label="Expense Action Options">
                                <button type="button" class="btn btn-outline-secondary mb-3" @onclick="() => getEditableExpense(expense.ExpenseId)">
                                    Edit
                                </button>

                                <button type="button" class="btn btn-outline-secondary  mb-3" @onclick="() => deleteExpense(expense.ExpenseId)">
                                    Delete
                                </button>
                            </div>
                        </th>
                    </tr>


                }
            }
        </tbody>
    </table>



    <div class="card shadow my-4" style="width: 22rem;">
        <div class="card-header">
            <h2>Total Expenses for this month:</h2>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                <h4>
                    @Math.Round((Double)totalMonthlyExpenses, 2)$
                </h4>
            </li>
        </ul>
    </div>

   

}
else
{
    <h2>
        Fetching Info...
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">

        </div>
    </h2>
}

<div>
    <AlertComponent @ref="alertComponent"></AlertComponent>
</div>

@if (expense != null)
{
    <EditForm Model="expense" OnValidSubmit="editOrAddNewExpenseSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="container shadow-lg p-3 mb-4">
            <div class="row">

                <InputNumber hidden readonly class="form-control" id="ExpenseId" @bind-Value="expense.ExpenseId" />
                <InputText hidden readonly class="form-control" id="UserId" @bind-Value="expense.UserId"></InputText>
                <InputText hidden readonly class="form-control" id="MonthYear" @bind-Value="expense.MonthYear"></InputText>
                <InputDate hidden readonly class="form-control" id="DateSubmitted" @bind-Value="expense.DateSubmitted" rows=3></InputDate>

                <div class="col-auto">
                    <label for="ExpenseTypes" class="col-form-label">Expense Type</label>
                    <InputSelect class="form-control" id="ExpenseTypes" @bind-Value="expense.ExpenseTypes">
                        @foreach (var value in Enum.GetValues(typeof(Expenses.ExpenseCategoriesList)))
                            {
                            <option>
                                @value
                            </option>
                            }
                    </InputSelect>
                </div>

                <div class="col-auto">
                    <label for="Amount" class="col-form-label">Amount</label>
                    <InputNumber class="form-control" id="Amount" @bind-Value="expense.Amount"></InputNumber>
                </div>

                <div class="col-xs-auto col-sm-4">
                    <label for="Notes" class="col-form-label">Notes</label>
                    <InputTextArea class="form-control" id="Notes" @bind-Value="expense.Notes" rows=3></InputTextArea>
                </div>

                <div class="col-auto">
                    <label for="DatePaid" class="col-form-label">Date Spent</label>
                    <InputDate class="form-control" id="DateSpent" @bind-Value="expense.DateSpent" rows=3></InputDate>
                </div>
            </div>

            <br />


            @if (expense.ExpenseId > 0)
            {

                <button class="btn btn-outline-primary">
                    Submit Edited Values For Expense #@expense.ExpenseId
                </button>


                <button class="btn btn-outline-secondary" @onclick="() => { makeFreshExpense(); }">
                    Create A New Expense Instead(Clear Form)
                </button>

            }
            else
            {
                <button class="btn btn-outline-primary">
                    Submit A New Expense
                </button>
            }



        </div>
    </EditForm>

}



@code {

    Expenses expense;

    AlertComponent alertComponent;

    //Needs to match the route params but that match doesn't need to be case sensitive
    [Parameter]
    public string targetMonth { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    IEnumerable<Expenses> expensesbyMonth;

    public double? totalMonthlyExpenses;
    public string currentUser;

    public void makeFreshExpense()
    {

        expense = new Expenses
        {
            DateSpent = DateTime.Now,
            DateSubmitted = DateTime.Now,
            UserId = expense.UserId,
            MonthYear = "placeholder"
        };
    }



    protected override async Task OnParametersSetAsync()
    {
        targetMonth = targetMonth ?? DateTime.Now.ToString("yyyy-MM");

        var authState = await AuthState;
        var user = authState.User;

      
        currentUser = user.FindFirst(ClaimTypes.Name).Value;
        



        expense = new Expenses
        {
            DateSpent = DateTime.Now,
            DateSubmitted = DateTime.Now,
            UserId = currentUser,
            MonthYear = "placeholder"
        };


        await refreshValues();

        makeFreshExpense();

    }

    async Task deleteExpense(int deletedExpenseId)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete Income #{deletedExpenseId}? This can't be undone.....");

        if (confirmed)
        {
            await ExpensesScreenUseCases.DeleteExpense(deletedExpenseId);

            await refreshValues();
        }


    }


    /*Populates the form with a chosen expenses values and uses the retrieved expenses primary key
    to tell the form to edit the retrieved expense instead of creating a new expense*/

    async Task getEditableExpense(int ExpenseId)
    {
        expense = await ExpensesScreenUseCases.GetSingleExpense(ExpenseId);
    }

    async Task editOrAddNewExpenseSubmit()
    {

        if (expense.ExpenseId! > 0)
        {
            if (expense.DateSpent.ToString("yyyy-MM") != targetMonth)
            {
                alertComponent.Message = $"Please enter a value for \"Date Spent\" whose year/month matches: {targetMonth} ";
                alertComponent.show("danger");
            }
            else
            {
                await ExpensesScreenUseCases.EditExpense(expense);

                makeFreshExpense();

                await refreshValues();
            }

        }

        else
        {

            if (expense.DateSpent.ToString("yyyy-MM") != targetMonth)
            {
                alertComponent.Message = $"Please enter a value for \"Date Spent\" whose year/month matches: {targetMonth} ";
                alertComponent.show("danger");
            }
            else
            {
                await ExpensesScreenUseCases.CreateNewExpense(expense);

                makeFreshExpense();

                await refreshValues();
            }
        }

    }

    private async Task refreshValues()
    {
        expensesbyMonth = await ExpensesScreenUseCases.ViewExpensesByMonth(targetMonth);

        if (expensesbyMonth == null)
        {
            totalMonthlyExpenses = 0;
            StateHasChanged();
        }
        else
        {
            totalMonthlyExpenses = 0;
            foreach (var expenseAmount in expensesbyMonth)
            {
                if (currentUser == expenseAmount.UserId && expenseAmount.GroupsGroupsId == null)
                {
                    totalMonthlyExpenses += expenseAmount.Amount;
                }
            }
        }
        /*"totalMonthlyExpenses = 0" always had to be put AFTER the expensesbyMonth Initialization
        in order to reset correctlywhen going back and forth between diffent months. Putting it at
        the beginning of the OnParametersSetAsync function made it so that the amount didn't reset
        and instead just keep adding, leading to seeing a total number of expenses for all pages visited, instead of a total for each month*/


    }


}
