@page "/userProfilePage"
@inject IAdminScreenUseCases AdminScreenUseCases
@inject IGroupsScreenUseCases GroupsScreenUseCases

@if (currentIdentityUser != null)
{
    <div class="row">
        <h3>Hello @currentIdentityUser.UserName, welcome to your profile page!</h3>
    </div>

    <br />
    <br />

    <div class="row">
        <details>
            <summary>User Info(Click here to reveal)</summary>
            <ol>
                <li>Your Id: @currentIdentityUser.Id</li>
                <li>Your Email: @currentIdentityUser.Email</li>
                <li>The date you signed up: @currentIdentityUser.DateAdded</li>
                <li>Your username: @currentIdentityUser.UserName</li>
            </ol>
        </details>
    </div>

    <br />
    <br />

    <div class="row">
        <div class="card" style="width: 18rem;">
            <div class="card-header">
                Your Group(s):
            </div>
            <ul class="list-group list-group-flush">
                @if (userGroupList != null)
                {
                    foreach (var group in userGroupList)
                    {
                        <li class="list-group-item">@group.Groups.GroupName</li>
                    }
                }


            </ul>
        </div>
    </div>
}
else
{
    <div class="row justify-content-center">
        <div class="spinner-grow text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <h2>Fetching your info...</h2>
        <div class="spinner-grow text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {

    public string currentUser;
    ExpenseTrackerUser currentIdentityUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    List<GroupUsers> userGroupList;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;
        currentUser = user.FindFirst(ClaimTypes.Name).Value;

        currentIdentityUser = await AdminScreenUseCases.ViewSingleUser(currentUser);

        userGroupList = await GroupsScreenUseCases.ViewAllGroupsByUser(currentUser);

    }
}

