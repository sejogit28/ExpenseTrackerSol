@page "/userProfilePage"
@inject IAdminScreenUseCases AdminScreenUseCases
@inject IGroupsScreenUseCases GroupsScreenUseCases

@if (currentIdentityUser != null)
{
    <div class="row">
        <h3>Hello @currentUser, welcome to your profile page!</h3>
    </div>

    <br />
    <br />

    <div class="row">
        <details>
            <summary>User Info(Click here to reveal)</summary>
            <ol>
                <li>Your Id: @currentIdentityUser.UserId</li>
                <li>Your Email: @currentIdentityUser.UserEmail</li>
                <li>The date you signed up: @currentIdentityUser.UserDateJoined</li>
                <li>Your username: @currentIdentityUser.UserName</li>
            </ol>
        </details>
    </div>

    <br />
    <br />

    <div class="row">
        <div class="card" style="width: 35rem;">

            @if (userGroupList != null)
            {

                if (userGroupList.Count() == 0)
                {
                    <div class="card-header">
                        No Groups Yet
                    </div>
                }
                else if (userGroupList.Count() < 2)
                {
                    <div class="card-header">
                        Your Group:
                    </div>
                }
                else
                {
                    <div class="card-header">
                        Your Groups:
                    </div>
                }
            }
            <ul class="list-group list-group-flush">

                @if (userGroupList != null)
                {

                    foreach (var group in userGroupList)
                    {
                        <li class="list-group-item">
                            <NavLink href="@($"/grouphomepage/{group.Groups.GroupsId}")">
                                @group.Groups.GroupName
                            </NavLink>
                            <button class="btn btn-outline-secondary float-right" @onclick="async () => { await DeleteGroup(group.Groups.GroupsId); }">
                                Delete
                            </button>
                            <button class="btn btn-outline-secondary float-right mx-3" @onclick="async () => { await leaveGroup(group.Groups.GroupsId, currentIdentityUser.UserName); }">
                                Leave Group
                            </button>
                            <button class="btn btn-outline-secondary float-right" @onclick="async () => { await getEditableGroupName(group.Groups.GroupsId); }">
                                Edit Group Name
                            </button>
                        </li>
                    }
                }
            </ul>
            <div class="card-footer">

                @if (showCreateGroupForm == false)
                {
                    <button type="button" class="btn btn-outline-info" @onclick="() => { toggleGroupForm(); }">
                        Create A New Group
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-info" @onclick="() => { closeGroupForm(); }">
                        Cancel
                    </button>
                }
            </div>
        </div>
    </div>

    <br />
    <br />

    @if (showCreateGroupForm == true)
    {
        <EditForm Model="group" OnValidSubmit="createNewGroupOrEditGroupName">

            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="card w-25 shadow-sm">
                <h5 class="card-header">Create a New Group</h5>
                <div class="card-body">
                    <InputText hidden class="form-control" id="ExpenseTrackerUserId" @bind-Value="group.ExpenseTrackerUserId"></InputText>
                    <InputDate hidden class="form-control" id="DateCreated" @bind-Value="group.DateCreated"></InputDate>

                    <div class="form-group mx-sm-3 mb-2">
                        <label for="Amount" class="col-form-label">Group Name</label>
                        <InputText class="form-control" id="GroupName" @bind-Value="group.GroupName"></InputText>
                    </div>
                </div>
                <div class="card-footer">
                    @if (group.GroupsId > 0)
                    {
                        <button class="btn btn-outline-info">
                            Edit This Groups Name
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-outline-info">
                            Create Group
                        </button>
                    }

                </div>
            </div>
        </EditForm>

        <br />
        <br />
    }

}
else
{
    <div class="row justify-content-center">
        <div class="spinner-grow text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <h2>Fetching your info...</h2>
        <div class="spinner-grow text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {

    public string currentUser;

    UserProfile currentIdentityUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    Groups group;

    List<GroupUsers> userGroupList;

    public bool showCreateGroupForm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;
        currentUser = user.FindFirst(ClaimTypes.Name).Value;

        currentIdentityUser = await AdminScreenUseCases.ViewSingleUser(currentUser);

        userGroupList = await GroupsScreenUseCases.ViewAllGroupsByUser(currentUser);

        showCreateGroupForm = false;

        getFreshGroup();
    }

    public async Task createNewGroupOrEditGroupName()
    {
        if (group.GroupsId > 0)
        {
            await GroupsScreenUseCases.UpdateGroupName(group);
            await reRenderPageAfterSubmit();
        }
        else
        {
            var newGroup = await GroupsScreenUseCases.CreateNewGroup(group, currentUser);

            var newMemberObj = new AddNewMemberToGroup
                {
                    GroupId = newGroup.GroupsId,
                    NewMemberUserName = currentUser
                };

            await GroupsScreenUseCases.AddUserToGroup(newMemberObj);

            await reRenderPageAfterSubmit();
        }
    }


    public async Task getEditableGroupName(int editableGroupId)
    {
        group = await GroupsScreenUseCases.ViewSingleGroup(editableGroupId);
        toggleGroupForm();
    }

    public async Task leaveGroup(int shrinkingGroupId, string leavingMemberName)
    {
        await GroupsScreenUseCases.RemoveMemberFromGroup(shrinkingGroupId, leavingMemberName);
        userGroupList = await GroupsScreenUseCases.ViewAllGroupsByUser(currentUser);
    }


    public async Task DeleteGroup(int deletableGroupId)
    {
        await GroupsScreenUseCases.DeleteSingleGroup(deletableGroupId);

        userGroupList = await GroupsScreenUseCases.ViewAllGroupsByUser(currentUser);
    }

    public async Task reRenderPageAfterSubmit()
    {
        closeGroupForm();
        getFreshGroup();
        userGroupList = await GroupsScreenUseCases.ViewAllGroupsByUser(currentUser);
    }


    public void getFreshGroup()
    {
        group = new Groups
            {
                DateCreated = DateTime.Now,
                ExpenseTrackerUserId = currentIdentityUser.UserId
            };
    }

    public void toggleGroupForm()
    {
        showCreateGroupForm = true;
    }


    public void closeGroupForm()
    {
        showCreateGroupForm = false;
        getFreshGroup();
    }

}

