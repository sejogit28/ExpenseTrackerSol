@page "/groupincomes/{groupId:int}"
@inject IIncomesScreenUseCases IncomesScreenUseCases
@inject IGroupsScreenUseCases GroupsScreenUseCases
@inject NavigationManager NavManager


@if (currentGroup != null)
{
    <div class="row justify-content-center">
        <div class="col-3 justify-content-start">
            <a class="btn btn-info" href="@($"/grouphomepage/{groupId}")" role="button">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </a>
        </div>
        <div class="col-6 justify-content-center">
            <h1>A Full List of All @currentGroup.GroupName's Incomes<i class="bi bi-list-ul"></i></h1>
        </div>
        <div class="col-3 justify-content-end">
            <div class="btn-group dropright">
                <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Filter By Income Type
                </button>
                <div class="dropdown-menu">
                    <a class="dropdown-item" @onclick="async() => { await unFilterIncomes();  }">All</a>
                    <div class="dropdown-divider"></div>
                    @*<button class="btn btn-outline-info" @onclick="() => { filterIncomes(); }">Paid Back</button>*@
                    @foreach (var value in Enum.GetValues(typeof(Incomes.IncomeCategoriesList)))
                    {
                        <a class="dropdown-item" @onclick="async() => { await filterIncomes(value.ToString()); }">@value.ToString()</a>
                    }
                </div>
            </div>
        </div>
    </div>
}

<br />

@if (filteredIncomes != null)
{

    <table class="table table-striped table-hover table-responsive-lg shadow">
        <thead>
            <tr>
                <th scope="col">Income Id</th>
                <th scope="col">User Id</th>
                <th scope="col">Income Type</th>
                <th scope="col">Amount</th>
                <th scope="col">Notes</th>
                <th scope="col">Date Paid</th>
                <th scope="col">Date Submitted</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var income in filteredIncomes)
            {
                if (groupId == income.GroupsGroupsId)
                {
                    <tr>
                        <th scope="row">@income.IncomeId</th>
                        <th scope="row">@income.UserId</th>
                        <th scope="row">@income.IncomeTypes</th>
                        <th scope="row">@income.Amount</th>
                        <th scope="row">@income.Notes</th>
                        <th scope="row"><NavLink href="@($"/groupincomesbymonth/{groupId}/{income.MonthYear}")">@income.DatePaid.ToShortDateString()</NavLink></th>
                        <th scope="row">@income.DateSubmitted.ToShortDateString()</th>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <h2>
        Fetching Info...
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">

        </div>
    </h2>
}



@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    public int groupId { get; set; }

    public string currentUser;
    Groups currentGroup;
    IList<Incomes> filteredIncomes;
    IList<string> currentGroupMembers;
    //public string SearchTerm;
    //IList<Incomes> allIncomes;

    protected override async Task OnInitializedAsync()
    {

        currentGroup = await GroupsScreenUseCases.ViewSingleGroup(groupId);
        currentGroupMembers = await GroupsScreenUseCases.ViewAllGroupMemberNames(groupId);

        var authState = await AuthState;
        var user = authState.User;

        currentUser = user.FindFirst(ClaimTypes.Name).Value;

        groupSecurity();

        filteredIncomes = await IncomesScreenUseCases.ViewAllIncomes();
    }

    public async Task filterIncomes(string searchTerm)
    {
        //IList<String> incomeCategories = new[] {"Paid_Back", "Job", "Borrowed", "Tax_Return"};

        await unFilterIncomes();

        foreach (var income in filteredIncomes.ToList())
        {
            if (income.IncomeTypes.ToString() != searchTerm)
            {
                filteredIncomes.Remove(income);
            }
        }
        StateHasChanged();
    }
    public async Task unFilterIncomes()
    {
        filteredIncomes = await IncomesScreenUseCases.ViewAllIncomes();
        StateHasChanged();
    }

    public void groupSecurity()
    {
        if (!currentGroupMembers.Contains(currentUser))
        {
            NavManager.NavigateTo("/userProfilePage");
        }
    }

}
