@page "/login"
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@inject IAuthRepository AuthRepository
@inject NavigationManager NavManager

<h1>Login Below</h1>

@*Putting "context" next to Autorizeview below needs to be done if you are nesting multiple render fragments due 
to an error on blazors part*@

<AuthorizeView Context="Auth">

    <NotAuthorized>
        @if (ShowLoginError)
        {
            <div class="alert alert-danger" role="alert">
                <p>@Error</p>
            </div>
        }

        <EditForm Model="_loginAuthentication" OnValidSubmit="LoginUser" class="card card-body bg-light mt-5">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <label for="email" class="col-md-2 col-form-label">Email:</label>
                <div class="col-md-10">
                    <InputText id="email" class="form-control" @bind-Value="_loginAuthentication.Email" />
                    <ValidationMessage For="@(() => _loginAuthentication.Email)" />
                </div>
            </div>
            <div class="form-group row">
                <label for="password" class="col-md-2 col-form-label">Password:</label>
                <div class="col-md-10">
                    <InputText type="password" id="password" class="form-control" @bind-Value="_loginAuthentication.Password" />
                    <ValidationMessage For="@(() => _loginAuthentication.Password)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 text-right">
                    <button type="submit" class="btn btn-info">Login</button>
                </div>
            </div>
        </EditForm>

        @*<br/>
        <div class="row">
            <h2>
                <NavLink class="nav-link" href="@($"/forgotPassword")"> Forgot Password??? </NavLink>
            </h2>
        </div>*@

        <br />

        <div class="row mb-3">
            <button type="button" class="btn btn-outline-info mr-3 mb-3"  @onclick="async () => { await LoginDemoAdmin(); }">1-Click Login as Demo Admin</button>
            <button type="button" class="btn btn-outline-info mb-3" @onclick="async () => { await LoginDemoUser(); }">1-Click Login as Demo User</button>
        </div>

        <div class="row">
            <h2 class="text-center">Not a Member? <NavLink class="nav-link" href="@($"/register")"> Sign-up today!</NavLink></h2>
        </div>
    </NotAuthorized>

    <Authorized >
        
        <h6>
            Hi @Auth.User.Identity.Name! You are already logged in and may have been redirected here because you tried to
            access a page you arent authorized to. Use the dashboard on the left to jump back in!
        </h6>
        
    </Authorized>
</AuthorizeView>

@code {

    private LoginAuthenticationDto _loginAuthentication = new LoginAuthenticationDto();

    public string currentUser;


    public bool ShowLoginError { get; set; }
    public string Error { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }



    public async Task LoginUser()
    {
        ShowLoginError = false;

        var result = await AuthRepository.Login(_loginAuthentication);
        if (!result.IsLoginSuccessful)
        {
            Error = result.ErrMessage;
            ShowLoginError = true;
        }
        else
        {
            //var timer = new Timer(new TimerCallback(_ =>
            //{

            //}), null, 250, 250);
            NavManager.NavigateTo("/loginPageReload");
        }
    }

    public async Task LoginDemoAdmin()
    {
        ShowLoginError = false;

        _loginAuthentication.Email = "expenseTrackDemoAdmin28@mailinator.com";
        _loginAuthentication.Password = "D8f8nd@DA";
        var result = await AuthRepository.Login(_loginAuthentication);
        if (!result.IsLoginSuccessful)
        {
            Error = result.ErrMessage;
            ShowLoginError = true;
        }
        else
        {
            //var timer = new Timer(new TimerCallback(_ =>
            //{

            //}), null, 250, 250);
            NavManager.NavigateTo("/loginPageReload");
        }
    }

    public async Task LoginDemoUser()
    {
        ShowLoginError = false;

        _loginAuthentication.Email = "expenseTrackDemoUser28@mailinator.com";
        _loginAuthentication.Password = "D8f8nd@DU";
        var result = await AuthRepository.Login(_loginAuthentication);
        if (!result.IsLoginSuccessful)
        {
            Error = result.ErrMessage;
            ShowLoginError = true;
        }
        else
        {
            //var timer = new Timer(new TimerCallback(_ =>
            //{

            //}), null, 250, 250);
            NavManager.NavigateTo("/loginPageReload");
        }
    }
}
