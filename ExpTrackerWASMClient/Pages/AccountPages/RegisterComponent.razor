@page "/register"
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@inject IAuthRepository AuthRepository
@inject NavigationManager NavigationManager


<h1>Register Below!</h1>

@if (ShowRegistrationErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}
<EditForm Model="_userRegistration" OnValidSubmit="RegisterExpUser" class="card card-body bg-light mt-5 mb-3">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="_userRegistration.Email" />
            <ValidationMessage For="@(() => _userRegistration.Email)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="_userRegistration.Password" />
            <ValidationMessage For="@(() => _userRegistration.Password)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="confirm" class="col-md-2 col-form-label">Confirm Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="confirm" class="form-control" @bind-Value="_userRegistration.ConfirmPassword" />
            <ValidationMessage For="@(() => _userRegistration.ConfirmPassword)" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-info">Register</button>
        </div>
    </div>
</EditForm>

<div class="row my-3">
    <button type="button" class="btn btn-outline-info mr-3 mb-3" @onclick="async () => { await LoginDemoAdmin(); }">1-Click Login as Demo Admin</button>
    <button type="button" class="btn btn-outline-info mb-3" @onclick="async () => { await LoginDemoUser(); }">1-Click Login as Demo User</button>
</div>

<br/>
<br />
@if (registerSuccessful == true)
{
<div class="alert alert-success" role="alert">
    <p>@Message</p>
</div>
}


@code {

    private UserRegistrationDto _userRegistration = new UserRegistrationDto();
    private LoginAuthenticationDto _loginAuthentication = new LoginAuthenticationDto();
    public bool ShowRegistrationErrors;
    public IEnumerable<string> Errors;

    public bool registerSuccessful { get; set; }
    public string Message { get; set; }

    public async Task RegisterExpUser()
    {
        ShowRegistrationErrors = false;
        registerSuccessful = false;

        var result = await AuthRepository.RegisterExpUser(_userRegistration);

        if (!result.IsSuccessfulRegistration)
        {
            Errors = result.Errors;
            ShowRegistrationErrors = true;
        }
        else
        {
            await SetMessage(true, "Registration Successful! Redirecting to login page...");
            RedirectToNextPage("/login");
        }

    }

    public async Task LoginDemoAdmin()
    {
        ShowRegistrationErrors = false;
        await SetMessage(true, "Demo User Login Successful! Redirecting to profile page...");
        _loginAuthentication.Email = "expenseTrackDemoAdmin28@mailinator.com";
        _loginAuthentication.Password = "D8f8nd@DA";
        await AuthRepository.Login(_loginAuthentication);
        RedirectToNextPage("/loginPageReload");

    }

    public async Task LoginDemoUser()
    {
        ShowRegistrationErrors = false;
        await SetMessage(true, "Demo User Login Successful! Redirecting to profile page...");
        _loginAuthentication.Email = "expenseTrackDemoUser28@mailinator.com";
        _loginAuthentication.Password = "D8f8nd@DU";
        await AuthRepository.Login(_loginAuthentication);

        RedirectToNextPage("/loginPageReload");

    }

    private async Task SetMessage(bool messageStatus, string currentMessage)
    {
        registerSuccessful = messageStatus;
        Message = currentMessage;
        StateHasChanged();
        await Task.Delay(3000);

    }

    private void RedirectToNextPage(string path)
    {
        NavigationManager.NavigateTo(path);
        registerSuccessful = false;
        Message = "";
    }


}
